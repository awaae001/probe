// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.1
// source: grpc/proto/registry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 流式传输类型
type StreamingInfo_StreamType int32

const (
	// 一元调用（默认）
	StreamingInfo_UNARY StreamingInfo_StreamType = 0
	// 客户端流
	StreamingInfo_CLIENT_STREAMING StreamingInfo_StreamType = 1
	// 服务端流
	StreamingInfo_SERVER_STREAMING StreamingInfo_StreamType = 2
	// 双向流
	StreamingInfo_BIDIRECTIONAL_STREAMING StreamingInfo_StreamType = 3
)

// Enum value maps for StreamingInfo_StreamType.
var (
	StreamingInfo_StreamType_name = map[int32]string{
		0: "UNARY",
		1: "CLIENT_STREAMING",
		2: "SERVER_STREAMING",
		3: "BIDIRECTIONAL_STREAMING",
	}
	StreamingInfo_StreamType_value = map[string]int32{
		"UNARY":                   0,
		"CLIENT_STREAMING":        1,
		"SERVER_STREAMING":        2,
		"BIDIRECTIONAL_STREAMING": 3,
	}
)

func (x StreamingInfo_StreamType) Enum() *StreamingInfo_StreamType {
	p := new(StreamingInfo_StreamType)
	*p = x
	return p
}

func (x StreamingInfo_StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingInfo_StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_registry_proto_enumTypes[0].Descriptor()
}

func (StreamingInfo_StreamType) Type() protoreflect.EnumType {
	return &file_grpc_proto_registry_proto_enumTypes[0]
}

func (x StreamingInfo_StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingInfo_StreamType.Descriptor instead.
func (StreamingInfo_StreamType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{5, 0}
}

// 状态类型
type ConnectionStatus_StatusType int32

const (
	ConnectionStatus_CONNECTED    ConnectionStatus_StatusType = 0
	ConnectionStatus_DISCONNECTED ConnectionStatus_StatusType = 1
	ConnectionStatus_ERROR        ConnectionStatus_StatusType = 2
)

// Enum value maps for ConnectionStatus_StatusType.
var (
	ConnectionStatus_StatusType_name = map[int32]string{
		0: "CONNECTED",
		1: "DISCONNECTED",
		2: "ERROR",
	}
	ConnectionStatus_StatusType_value = map[string]int32{
		"CONNECTED":    0,
		"DISCONNECTED": 1,
		"ERROR":        2,
	}
)

func (x ConnectionStatus_StatusType) Enum() *ConnectionStatus_StatusType {
	p := new(ConnectionStatus_StatusType)
	*p = x
	return p
}

func (x ConnectionStatus_StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionStatus_StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_registry_proto_enumTypes[1].Descriptor()
}

func (ConnectionStatus_StatusType) Type() protoreflect.EnumType {
	return &file_grpc_proto_registry_proto_enumTypes[1]
}

func (x ConnectionStatus_StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionStatus_StatusType.Descriptor instead.
func (ConnectionStatus_StatusType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{9, 0}
}

// 操作类型
type SubscriptionRequest_Action int32

const (
	// 订阅事件
	SubscriptionRequest_SUBSCRIBE SubscriptionRequest_Action = 0
	// 取消订阅事件
	SubscriptionRequest_UNSUBSCRIBE SubscriptionRequest_Action = 1
)

// Enum value maps for SubscriptionRequest_Action.
var (
	SubscriptionRequest_Action_name = map[int32]string{
		0: "SUBSCRIBE",
		1: "UNSUBSCRIBE",
	}
	SubscriptionRequest_Action_value = map[string]int32{
		"SUBSCRIBE":   0,
		"UNSUBSCRIBE": 1,
	}
)

func (x SubscriptionRequest_Action) Enum() *SubscriptionRequest_Action {
	p := new(SubscriptionRequest_Action)
	*p = x
	return p
}

func (x SubscriptionRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_registry_proto_enumTypes[2].Descriptor()
}

func (SubscriptionRequest_Action) Type() protoreflect.EnumType {
	return &file_grpc_proto_registry_proto_enumTypes[2]
}

func (x SubscriptionRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionRequest_Action.Descriptor instead.
func (SubscriptionRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{11, 0}
}

type RegisterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// API 密钥，用于身份验证
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Bot 的网络地址, 例如 "http://bot-a:50051"
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Bot 提供的 gRPC 服务名称列表
	Services      []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_grpc_proto_registry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *RegisterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

type RegisterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 注册是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 可选的返回消息
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_grpc_proto_registry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 反向连接消息类型
type ConnectionMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*ConnectionMessage_Register
	//	*ConnectionMessage_Request
	//	*ConnectionMessage_Response
	//	*ConnectionMessage_Heartbeat
	//	*ConnectionMessage_Status
	//	*ConnectionMessage_Event
	//	*ConnectionMessage_Subscription
	MessageType   isConnectionMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionMessage) Reset() {
	*x = ConnectionMessage{}
	mi := &file_grpc_proto_registry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionMessage) ProtoMessage() {}

func (x *ConnectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionMessage.ProtoReflect.Descriptor instead.
func (*ConnectionMessage) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionMessage) GetMessageType() isConnectionMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *ConnectionMessage) GetRegister() *ConnectionRegister {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *ConnectionMessage) GetRequest() *ForwardRequest {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *ConnectionMessage) GetResponse() *ForwardResponse {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Response); ok {
			return x.Response
		}
	}
	return nil
}

func (x *ConnectionMessage) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *ConnectionMessage) GetStatus() *ConnectionStatus {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *ConnectionMessage) GetEvent() *EventMessage {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *ConnectionMessage) GetSubscription() *SubscriptionRequest {
	if x != nil {
		if x, ok := x.MessageType.(*ConnectionMessage_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

type isConnectionMessage_MessageType interface {
	isConnectionMessage_MessageType()
}

type ConnectionMessage_Register struct {
	// 微服务连接注册
	Register *ConnectionRegister `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type ConnectionMessage_Request struct {
	// 网关推送的请求
	Request *ForwardRequest `protobuf:"bytes,2,opt,name=request,proto3,oneof"`
}

type ConnectionMessage_Response struct {
	// 微服务返回的响应
	Response *ForwardResponse `protobuf:"bytes,3,opt,name=response,proto3,oneof"`
}

type ConnectionMessage_Heartbeat struct {
	// 心跳消息
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

type ConnectionMessage_Status struct {
	// 连接状态消息
	Status *ConnectionStatus `protobuf:"bytes,5,opt,name=status,proto3,oneof"`
}

type ConnectionMessage_Event struct {
	// 事件消息
	Event *EventMessage `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

type ConnectionMessage_Subscription struct {
	// 订阅请求消息
	Subscription *SubscriptionRequest `protobuf:"bytes,7,opt,name=subscription,proto3,oneof"`
}

func (*ConnectionMessage_Register) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Request) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Response) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Heartbeat) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Status) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Event) isConnectionMessage_MessageType() {}

func (*ConnectionMessage_Subscription) isConnectionMessage_MessageType() {}

// 连接注册消息
type ConnectionRegister struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// API 密钥，用于身份验证
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// 微服务提供的 gRPC 服务名称列表
	Services []string `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// 可选的连接标识符
	ConnectionId  string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionRegister) Reset() {
	*x = ConnectionRegister{}
	mi := &file_grpc_proto_registry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRegister) ProtoMessage() {}

func (x *ConnectionRegister) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRegister.ProtoReflect.Descriptor instead.
func (*ConnectionRegister) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionRegister) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ConnectionRegister) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ConnectionRegister) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// 转发请求消息
type ForwardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 请求唯一标识符
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// gRPC 方法路径 (例如: /post.PostService/GetPost)
	MethodPath string `protobuf:"bytes,2,opt,name=method_path,json=methodPath,proto3" json:"method_path,omitempty"`
	// 请求头部
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 请求体 (protobuf 编码的字节)
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// 超时时间 (秒)
	TimeoutSeconds int32 `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// 流式传输支持
	StreamingInfo *StreamingInfo `protobuf:"bytes,6,opt,name=streaming_info,json=streamingInfo,proto3" json:"streaming_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardRequest) Reset() {
	*x = ForwardRequest{}
	mi := &file_grpc_proto_registry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRequest) ProtoMessage() {}

func (x *ForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRequest.ProtoReflect.Descriptor instead.
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{4}
}

func (x *ForwardRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ForwardRequest) GetMethodPath() string {
	if x != nil {
		return x.MethodPath
	}
	return ""
}

func (x *ForwardRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ForwardRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ForwardRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *ForwardRequest) GetStreamingInfo() *StreamingInfo {
	if x != nil {
		return x.StreamingInfo
	}
	return nil
}

// 流式传输信息
type StreamingInfo struct {
	state      protoimpl.MessageState   `protogen:"open.v1"`
	StreamType StreamingInfo_StreamType `protobuf:"varint,1,opt,name=stream_type,json=streamType,proto3,enum=registry.StreamingInfo_StreamType" json:"stream_type,omitempty"`
	// 是否为流的结束标记
	IsStreamEnd bool `protobuf:"varint,2,opt,name=is_stream_end,json=isStreamEnd,proto3" json:"is_stream_end,omitempty"`
	// 流序列号（用于排序）
	SequenceNumber int64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// 流数据块大小（字节）
	ChunkSize     int32 `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingInfo) Reset() {
	*x = StreamingInfo{}
	mi := &file_grpc_proto_registry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingInfo) ProtoMessage() {}

func (x *StreamingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingInfo.ProtoReflect.Descriptor instead.
func (*StreamingInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingInfo) GetStreamType() StreamingInfo_StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamingInfo_UNARY
}

func (x *StreamingInfo) GetIsStreamEnd() bool {
	if x != nil {
		return x.IsStreamEnd
	}
	return false
}

func (x *StreamingInfo) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *StreamingInfo) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// 转发响应消息
type ForwardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 对应的请求ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 响应状态码
	StatusCode int32 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// 响应头部
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 响应体 (protobuf 编码的字节)
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// 错误消息 (如果有)
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// 流式传输支持
	StreamingInfo *StreamingInfo `protobuf:"bytes,6,opt,name=streaming_info,json=streamingInfo,proto3" json:"streaming_info,omitempty"`
	// 响应体流式传输支持
	ResponseStreamInfo *ResponseStreamInfo `protobuf:"bytes,7,opt,name=response_stream_info,json=responseStreamInfo,proto3" json:"response_stream_info,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ForwardResponse) Reset() {
	*x = ForwardResponse{}
	mi := &file_grpc_proto_registry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardResponse) ProtoMessage() {}

func (x *ForwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardResponse.ProtoReflect.Descriptor instead.
func (*ForwardResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{6}
}

func (x *ForwardResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ForwardResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ForwardResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ForwardResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ForwardResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ForwardResponse) GetStreamingInfo() *StreamingInfo {
	if x != nil {
		return x.StreamingInfo
	}
	return nil
}

func (x *ForwardResponse) GetResponseStreamInfo() *ResponseStreamInfo {
	if x != nil {
		return x.ResponseStreamInfo
	}
	return nil
}

// 响应体流式传输信息
type ResponseStreamInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否为流式响应
	IsStreamed bool `protobuf:"varint,1,opt,name=is_streamed,json=isStreamed,proto3" json:"is_streamed,omitempty"`
	// 当前块在流中的索引
	ChunkIndex int64 `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	// 是否为最后一个块
	IsFinalChunk bool `protobuf:"varint,3,opt,name=is_final_chunk,json=isFinalChunk,proto3" json:"is_final_chunk,omitempty"`
	// 当前块大小
	ChunkSize int32 `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// 总响应大小（如果已知）
	TotalSize     *int64 `protobuf:"varint,5,opt,name=total_size,json=totalSize,proto3,oneof" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseStreamInfo) Reset() {
	*x = ResponseStreamInfo{}
	mi := &file_grpc_proto_registry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStreamInfo) ProtoMessage() {}

func (x *ResponseStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStreamInfo.ProtoReflect.Descriptor instead.
func (*ResponseStreamInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseStreamInfo) GetIsStreamed() bool {
	if x != nil {
		return x.IsStreamed
	}
	return false
}

func (x *ResponseStreamInfo) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ResponseStreamInfo) GetIsFinalChunk() bool {
	if x != nil {
		return x.IsFinalChunk
	}
	return false
}

func (x *ResponseStreamInfo) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ResponseStreamInfo) GetTotalSize() int64 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

// 心跳消息
type Heartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 时间戳
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 连接ID
	ConnectionId  string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_grpc_proto_registry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{8}
}

func (x *Heartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// 连接状态消息
type ConnectionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 连接ID
	ConnectionId string                      `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Status       ConnectionStatus_StatusType `protobuf:"varint,2,opt,name=status,proto3,enum=registry.ConnectionStatus_StatusType" json:"status,omitempty"`
	// 可选的状态消息
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionStatus) Reset() {
	*x = ConnectionStatus{}
	mi := &file_grpc_proto_registry_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStatus) ProtoMessage() {}

func (x *ConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStatus.ProtoReflect.Descriptor instead.
func (*ConnectionStatus) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{9}
}

func (x *ConnectionStatus) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ConnectionStatus) GetStatus() ConnectionStatus_StatusType {
	if x != nil {
		return x.Status
	}
	return ConnectionStatus_CONNECTED
}

func (x *ConnectionStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 事件消息
type EventMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 事件唯一标识符
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// 事件类型 (例如: "user.login", "order.created")
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// 发布者连接ID
	PublisherId string `protobuf:"bytes,3,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
	// 事件数据 (protobuf 编码的字节)
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// 发布时间戳 (Unix 时间戳)
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 事件元数据
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	mi := &file_grpc_proto_registry_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{10}
}

func (x *EventMessage) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventMessage) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

func (x *EventMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EventMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 订阅请求消息
type SubscriptionRequest struct {
	state  protoimpl.MessageState     `protogen:"open.v1"`
	Action SubscriptionRequest_Action `protobuf:"varint,1,opt,name=action,proto3,enum=registry.SubscriptionRequest_Action" json:"action,omitempty"`
	// 要订阅/取消订阅的事件类型列表
	EventTypes []string `protobuf:"bytes,2,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	// 订阅者连接ID
	SubscriberId  string `protobuf:"bytes,3,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_grpc_proto_registry_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_registry_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_registry_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriptionRequest) GetAction() SubscriptionRequest_Action {
	if x != nil {
		return x.Action
	}
	return SubscriptionRequest_SUBSCRIBE
}

func (x *SubscriptionRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *SubscriptionRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

var File_grpc_proto_registry_proto protoreflect.FileDescriptor

const file_grpc_proto_registry_proto_rawDesc = "" +
	"\n" +
	"\x19grpc/proto/registry.proto\x12\bregistry\"`\n" +
	"\x0fRegisterRequest\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x1a\n" +
	"\bservices\x18\x03 \x03(\tR\bservices\"F\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xae\x03\n" +
	"\x11ConnectionMessage\x12:\n" +
	"\bregister\x18\x01 \x01(\v2\x1c.registry.ConnectionRegisterH\x00R\bregister\x124\n" +
	"\arequest\x18\x02 \x01(\v2\x18.registry.ForwardRequestH\x00R\arequest\x127\n" +
	"\bresponse\x18\x03 \x01(\v2\x19.registry.ForwardResponseH\x00R\bresponse\x123\n" +
	"\theartbeat\x18\x04 \x01(\v2\x13.registry.HeartbeatH\x00R\theartbeat\x124\n" +
	"\x06status\x18\x05 \x01(\v2\x1a.registry.ConnectionStatusH\x00R\x06status\x12.\n" +
	"\x05event\x18\x06 \x01(\v2\x16.registry.EventMessageH\x00R\x05event\x12C\n" +
	"\fsubscription\x18\a \x01(\v2\x1d.registry.SubscriptionRequestH\x00R\fsubscriptionB\x0e\n" +
	"\fmessage_type\"n\n" +
	"\x12ConnectionRegister\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\x12\x1a\n" +
	"\bservices\x18\x02 \x03(\tR\bservices\x12#\n" +
	"\rconnection_id\x18\x03 \x01(\tR\fconnectionId\"\xd0\x02\n" +
	"\x0eForwardRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1f\n" +
	"\vmethod_path\x18\x02 \x01(\tR\n" +
	"methodPath\x12?\n" +
	"\aheaders\x18\x03 \x03(\v2%.registry.ForwardRequest.HeadersEntryR\aheaders\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\x12>\n" +
	"\x0estreaming_info\x18\x06 \x01(\v2\x17.registry.StreamingInfoR\rstreamingInfo\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa2\x02\n" +
	"\rStreamingInfo\x12C\n" +
	"\vstream_type\x18\x01 \x01(\x0e2\".registry.StreamingInfo.StreamTypeR\n" +
	"streamType\x12\"\n" +
	"\ris_stream_end\x18\x02 \x01(\bR\visStreamEnd\x12'\n" +
	"\x0fsequence_number\x18\x03 \x01(\x03R\x0esequenceNumber\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x05R\tchunkSize\"`\n" +
	"\n" +
	"StreamType\x12\t\n" +
	"\x05UNARY\x10\x00\x12\x14\n" +
	"\x10CLIENT_STREAMING\x10\x01\x12\x14\n" +
	"\x10SERVER_STREAMING\x10\x02\x12\x1b\n" +
	"\x17BIDIRECTIONAL_STREAMING\x10\x03\"\x9e\x03\n" +
	"\x0fForwardResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1f\n" +
	"\vstatus_code\x18\x02 \x01(\x05R\n" +
	"statusCode\x12@\n" +
	"\aheaders\x18\x03 \x03(\v2&.registry.ForwardResponse.HeadersEntryR\aheaders\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12>\n" +
	"\x0estreaming_info\x18\x06 \x01(\v2\x17.registry.StreamingInfoR\rstreamingInfo\x12N\n" +
	"\x14response_stream_info\x18\a \x01(\v2\x1c.registry.ResponseStreamInfoR\x12responseStreamInfo\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xce\x01\n" +
	"\x12ResponseStreamInfo\x12\x1f\n" +
	"\vis_streamed\x18\x01 \x01(\bR\n" +
	"isStreamed\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\x03R\n" +
	"chunkIndex\x12$\n" +
	"\x0eis_final_chunk\x18\x03 \x01(\bR\fisFinalChunk\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x05R\tchunkSize\x12\"\n" +
	"\n" +
	"total_size\x18\x05 \x01(\x03H\x00R\ttotalSize\x88\x01\x01B\r\n" +
	"\v_total_size\"N\n" +
	"\tHeartbeat\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12#\n" +
	"\rconnection_id\x18\x02 \x01(\tR\fconnectionId\"\xca\x01\n" +
	"\x10ConnectionStatus\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12=\n" +
	"\x06status\x18\x02 \x01(\x0e2%.registry.ConnectionStatus.StatusTypeR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"8\n" +
	"\n" +
	"StatusType\x12\r\n" +
	"\tCONNECTED\x10\x00\x12\x10\n" +
	"\fDISCONNECTED\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\"\xa2\x02\n" +
	"\fEventMessage\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1d\n" +
	"\n" +
	"event_type\x18\x02 \x01(\tR\teventType\x12!\n" +
	"\fpublisher_id\x18\x03 \x01(\tR\vpublisherId\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12@\n" +
	"\bmetadata\x18\x06 \x03(\v2$.registry.EventMessage.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc3\x01\n" +
	"\x13SubscriptionRequest\x12<\n" +
	"\x06action\x18\x01 \x01(\x0e2$.registry.SubscriptionRequest.ActionR\x06action\x12\x1f\n" +
	"\vevent_types\x18\x02 \x03(\tR\n" +
	"eventTypes\x12#\n" +
	"\rsubscriber_id\x18\x03 \x01(\tR\fsubscriberId\"(\n" +
	"\x06Action\x12\r\n" +
	"\tSUBSCRIBE\x10\x00\x12\x0f\n" +
	"\vUNSUBSCRIBE\x10\x012\xa9\x01\n" +
	"\x0fRegistryService\x12A\n" +
	"\bRegister\x12\x19.registry.RegisterRequest\x1a\x1a.registry.RegisterResponse\x12S\n" +
	"\x13EstablishConnection\x12\x1b.registry.ConnectionMessage\x1a\x1b.registry.ConnectionMessage(\x010\x01B\x13Z\x11discord-bot/protob\x06proto3"

var (
	file_grpc_proto_registry_proto_rawDescOnce sync.Once
	file_grpc_proto_registry_proto_rawDescData []byte
)

func file_grpc_proto_registry_proto_rawDescGZIP() []byte {
	file_grpc_proto_registry_proto_rawDescOnce.Do(func() {
		file_grpc_proto_registry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpc_proto_registry_proto_rawDesc), len(file_grpc_proto_registry_proto_rawDesc)))
	})
	return file_grpc_proto_registry_proto_rawDescData
}

var file_grpc_proto_registry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_grpc_proto_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_grpc_proto_registry_proto_goTypes = []any{
	(StreamingInfo_StreamType)(0),    // 0: registry.StreamingInfo.StreamType
	(ConnectionStatus_StatusType)(0), // 1: registry.ConnectionStatus.StatusType
	(SubscriptionRequest_Action)(0),  // 2: registry.SubscriptionRequest.Action
	(*RegisterRequest)(nil),          // 3: registry.RegisterRequest
	(*RegisterResponse)(nil),         // 4: registry.RegisterResponse
	(*ConnectionMessage)(nil),        // 5: registry.ConnectionMessage
	(*ConnectionRegister)(nil),       // 6: registry.ConnectionRegister
	(*ForwardRequest)(nil),           // 7: registry.ForwardRequest
	(*StreamingInfo)(nil),            // 8: registry.StreamingInfo
	(*ForwardResponse)(nil),          // 9: registry.ForwardResponse
	(*ResponseStreamInfo)(nil),       // 10: registry.ResponseStreamInfo
	(*Heartbeat)(nil),                // 11: registry.Heartbeat
	(*ConnectionStatus)(nil),         // 12: registry.ConnectionStatus
	(*EventMessage)(nil),             // 13: registry.EventMessage
	(*SubscriptionRequest)(nil),      // 14: registry.SubscriptionRequest
	nil,                              // 15: registry.ForwardRequest.HeadersEntry
	nil,                              // 16: registry.ForwardResponse.HeadersEntry
	nil,                              // 17: registry.EventMessage.MetadataEntry
}
var file_grpc_proto_registry_proto_depIdxs = []int32{
	6,  // 0: registry.ConnectionMessage.register:type_name -> registry.ConnectionRegister
	7,  // 1: registry.ConnectionMessage.request:type_name -> registry.ForwardRequest
	9,  // 2: registry.ConnectionMessage.response:type_name -> registry.ForwardResponse
	11, // 3: registry.ConnectionMessage.heartbeat:type_name -> registry.Heartbeat
	12, // 4: registry.ConnectionMessage.status:type_name -> registry.ConnectionStatus
	13, // 5: registry.ConnectionMessage.event:type_name -> registry.EventMessage
	14, // 6: registry.ConnectionMessage.subscription:type_name -> registry.SubscriptionRequest
	15, // 7: registry.ForwardRequest.headers:type_name -> registry.ForwardRequest.HeadersEntry
	8,  // 8: registry.ForwardRequest.streaming_info:type_name -> registry.StreamingInfo
	0,  // 9: registry.StreamingInfo.stream_type:type_name -> registry.StreamingInfo.StreamType
	16, // 10: registry.ForwardResponse.headers:type_name -> registry.ForwardResponse.HeadersEntry
	8,  // 11: registry.ForwardResponse.streaming_info:type_name -> registry.StreamingInfo
	10, // 12: registry.ForwardResponse.response_stream_info:type_name -> registry.ResponseStreamInfo
	1,  // 13: registry.ConnectionStatus.status:type_name -> registry.ConnectionStatus.StatusType
	17, // 14: registry.EventMessage.metadata:type_name -> registry.EventMessage.MetadataEntry
	2,  // 15: registry.SubscriptionRequest.action:type_name -> registry.SubscriptionRequest.Action
	3,  // 16: registry.RegistryService.Register:input_type -> registry.RegisterRequest
	5,  // 17: registry.RegistryService.EstablishConnection:input_type -> registry.ConnectionMessage
	4,  // 18: registry.RegistryService.Register:output_type -> registry.RegisterResponse
	5,  // 19: registry.RegistryService.EstablishConnection:output_type -> registry.ConnectionMessage
	18, // [18:20] is the sub-list for method output_type
	16, // [16:18] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_grpc_proto_registry_proto_init() }
func file_grpc_proto_registry_proto_init() {
	if File_grpc_proto_registry_proto != nil {
		return
	}
	file_grpc_proto_registry_proto_msgTypes[2].OneofWrappers = []any{
		(*ConnectionMessage_Register)(nil),
		(*ConnectionMessage_Request)(nil),
		(*ConnectionMessage_Response)(nil),
		(*ConnectionMessage_Heartbeat)(nil),
		(*ConnectionMessage_Status)(nil),
		(*ConnectionMessage_Event)(nil),
		(*ConnectionMessage_Subscription)(nil),
	}
	file_grpc_proto_registry_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpc_proto_registry_proto_rawDesc), len(file_grpc_proto_registry_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_registry_proto_goTypes,
		DependencyIndexes: file_grpc_proto_registry_proto_depIdxs,
		EnumInfos:         file_grpc_proto_registry_proto_enumTypes,
		MessageInfos:      file_grpc_proto_registry_proto_msgTypes,
	}.Build()
	File_grpc_proto_registry_proto = out.File
	file_grpc_proto_registry_proto_goTypes = nil
	file_grpc_proto_registry_proto_depIdxs = nil
}
